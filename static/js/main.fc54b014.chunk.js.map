{"version":3,"sources":["components/weather.jsx","components/locationForm.jsx","Weather.js","Utils.js","components/DailyForecast.jsx","components/App/App.jsx","index.jsx"],"names":["MainWeather","props","newDate","Date","className","children","data","temp","src","icon","alt","feels_like","wind","speed","humidity","city","getHours","getMinutes","description","LocationForm","handleChange","event","setState","value","target","onSubmit","e","preventDefault","state","console","log","this","type","name","onChange","React","Component","Weather","weatherResponse","main","temp_min","temp_max","pressure","country","sys","weather","setIcon","setDescription","setCity","setCountry","setDate","weatherArr","current","unixDate","dt","timezone","date","parseWeatherResponse","reduceForecast","list","groupedForecastByDays","i","finished","j","length","tmp","getDay","push","checkProperty","weatherData","key","hasOwnProperty","indexOf","forecast","reduce","days","weatherForDay","DailyWeather","weatherForAWeek","map","REACT_APP_APP_ID","process","App","currentDayWeather","undefined","location","isLoading","geolocation","lon","lat","getCoords","a","navigator","getCurrentPosition","pos","coords","longitude","latitude","updateWeatherData","getLocationWeather","requestUrl","fetch","response","json","error","getWeatherByName","gelocation","coord","getForecast","dayliForecast","search","text","Promise","all","then","ReactDOM","document","querySelector"],"mappings":"qRAIaA,EAAc,SAACC,GAC1B,IAAIC,EAAU,IAAIC,KAElB,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiCH,EAAMI,WACvC,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,aAAf,UACE,gCAAMH,EAAMK,KAAKC,KAAjB,QACA,8BACE,qBACEC,IAAG,2CAAsCP,EAAMK,KAAKG,KAAjD,WACHC,IAAI,UAIV,qBAAKN,UAAU,aAAf,SACE,6CAAgBH,EAAMK,KAAKK,WAA3B,UAEF,qBAAKP,UAAU,aAAf,SACE,uCAAUH,EAAMK,KAAKM,KAAKC,MAA1B,iBAEF,qBAAKT,UAAU,WAAf,SACE,2CAAcH,EAAMK,KAAKQ,SAAzB,YASJ,sBAAKV,UAAU,UAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,4CACA,6BAAKH,EAAMK,KAAKS,UAElB,sBAAKX,UAAU,gBAAf,UACGF,EAAQc,WADX,IACwBd,EAAQe,gBAEhC,qBAAKb,UAAU,uBAAf,SACE,6BAAKH,EAAMK,KAAKY,0BC5CfC,EAAb,kDACE,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAGRmB,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOD,SALnB,EAQnBE,SAAW,SAACC,GACVA,EAAEC,iBACF,EAAK1B,MAAMwB,SAAS,EAAKG,MAAML,QAR/B,EAAKK,MAAQ,CAAEL,MAAO,IAFL,EADrB,0CAaE,WAEE,OADAM,QAAQC,IAAIC,KAAK9B,MAAMK,KAAKG,MAE1B,qBAAKL,UAAU,gBAAf,SACE,uBAAMqB,SAAUM,KAAKN,SAArB,UACE,uBAAOrB,UAAU,gBAAjB,SACE,uBACE4B,KAAK,OACLC,KAAK,WACLV,MAAOQ,KAAKH,MAAML,MAClBW,SAAUH,KAAKX,iBAGnB,uBAAOY,KAAK,SAAST,MAAM,gBA1BrC,GAAkCY,IAAMC,W,QCF3BC,EAAb,WAMC,WAAYC,GAAkB,oBAC7B,MAaIA,EAZHC,KACChC,EAFF,EAEEA,KACAI,EAHF,EAGEA,WACA6B,EAJF,EAIEA,SACAC,EALF,EAKEA,SACAC,EANF,EAMEA,SACA5B,EAPF,EAOEA,SAEDF,EAIG0B,EAJH1B,KACM+B,EAGHL,EAHHM,IAAMD,QACNV,EAEGK,EAFHL,KACAY,EACGP,EADHO,QAEDd,KAAKxB,KAAOA,EACZwB,KAAKpB,WAAaA,EAClBoB,KAAKS,SAAWA,EAChBT,KAAKU,SAAWA,EAChBV,KAAKW,SAAWA,EAChBX,KAAKjB,SAAWA,EAChBiB,KAAKnB,KAAOA,EACZmB,KAAKe,QAAQD,GACbd,KAAKgB,eAAeF,GACpBd,KAAKiB,QAAQf,GACbF,KAAKkB,WAAWN,GAChBZ,KAAKmB,QAAQZ,GAhCf,kDAmCC,SAAea,GACd,IAAOC,EAAP,YAAkBD,EAAlB,MACGC,EAAQlC,cACVa,KAAKb,YAAckC,EAAQlC,eAtC9B,qBA0CC,SAAQiC,GACP,IAAOC,EAAP,YAAkBD,EAAlB,MACGC,EAAQ3C,OACVsB,KAAKtB,KAAO2C,EAAQ3C,QA7CvB,qBAiDC,SAAQM,GACHA,IACHgB,KAAKhB,KAAOA,KAnDf,wBAuDC,SAAW4B,GACNA,IACHZ,KAAKY,QAAUA,KAzDlB,qBA6DC,SAAQL,GACP,IAAMe,EAAWf,EAAgBgB,IAAMhB,EAAgBiB,SAAWjB,EAAgBiB,SAAW,GAC7FxB,KAAKyB,KAAO,IAAIrD,KAAgB,IAAXkD,OA/DvB,K,QCiBaI,EAAuB,SAACnB,GACpC,OAAO,IAAID,EAAQC,IAOPoB,EAAiB,WAI7B,IAJ6C,IAAfC,EAAc,uDAAP,GAC/BC,EAAwB,GAC1BC,EAAI,EACJC,GAAW,GACPA,GACP,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,GAAK,EAAG,CACxC,IAAME,EAAMR,EAAqBE,EAAKI,IACjCH,EAAsBC,GAGtBI,EAAIT,KAAKU,WAAaN,EAAsBC,GAAGD,EAAsBC,GAAGG,OAAS,GAAGR,KAAKU,SAC5FN,EAAsBC,GAAGM,KAAKF,GAE9BJ,IALDD,EAAsBO,KAAK,CAAEF,IAQ1BF,IAAMJ,EAAKK,OAAS,IACvBF,GAAW,GAKd,IAAMM,EAAgB,SAAhBA,EAAiBvB,EAASwB,GAC/B,IAAK,IAAIC,KAAOzB,EACXA,EAAQ0B,eAAeD,KACE,kBAAjBzB,EAAQyB,IAAqBA,EAAIE,QAAQ,QAAU,GAAM3B,EAAQyB,GAAOD,EAAYC,IAE5D,kBAAjBzB,EAAQyB,IAAqBA,EAAIE,QAAQ,QAAU,GAAK3B,EAAQyB,GAAOD,EAAYC,IAElE,kBAAjBzB,EAAQyB,IAAqBzB,EAAQyB,GAAOD,EAAYC,IAE/DD,EAAYC,aAAgBnE,KALtCkE,EAAYC,GAAOzB,EAAQyB,GAOO,kBAAjBzB,EAAQyB,IACzBF,EAAcvB,EAAQyB,GAAMD,EAAYC,MAMtCG,EAAWb,EAAsBc,QAAO,SAACC,EAAMC,GACpD,IADsE,EAChEP,EAAcO,EAAc,GADoC,cAElDA,GAFkD,IAEtE,2BAAmC,CAAC,IAA3B/B,EAA0B,QAClCuB,EAAcvB,EAASwB,IAH8C,8BAMtE,OADAM,EAAKR,KAAKE,GACHM,IACL,IACH,OAAOF,GCtEKI,G,MAAe,SAAC5E,GAC3B4B,QAAQC,IAAI7B,GACZ,IACM6E,EADW7E,EAAMwE,SACUM,KAAI,SAAClC,GACpC,OACE,gCAEE,gCACE,8BACE,qBACErC,IAAG,2CAAsCqC,EAAQpC,KAA9C,WACHC,IAAI,OAGR,+BACE,uBADF,IACUmC,EAAQtC,KADlB,eAIF,8BACE,yHACmB,uBADnB,IAC2BsC,EAAQlC,WADnC,cAIF,8BACE,yKAC2B,uBAD3B,IACmCkC,EAAQL,SAD3C,cAIF,8BACE,+KAC4B,uBAD5B,IACoCK,EAAQJ,SAD5C,cAIF,8BACE,oFACY,uBADZ,IACoBI,EAAQH,oBAMpC,OACE,qBAAKtC,UAAU,eAAf,SACE,qBAAKA,UAAU,oBAAf,SAAoC0E,QCvClCE,EAAqBC,mCAChBC,EAAb,4MACEtD,MAAQ,CACNuD,uBAAmBC,EACnBC,SAAU,GACVZ,SAAU,GACVa,WAAW,EACXC,YAAa,CAAEC,KAAM,QAAUC,IAAK,YANxC,EAQEC,UARF,sBAQc,sBAAAC,EAAA,sDACN,gBAAiBC,UACnBA,UAAUL,YAAYM,oBAAmB,SAACC,GACxC,MAAgCA,EAAIC,OAA5BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAEnB,EAAK3E,SACH,CACEiE,YAAa,CAAEC,IAAKQ,EAAWP,IAAKQ,KAEtC,kBAAM,EAAKC,0BAIfrE,QAAQC,IAAI,YAEdD,QAAQC,IAAI,EAAKF,MAAM2D,aAfb,2CARd,EA0BEY,mBA1BF,sBA0BuB,gCAAAR,EAAA,sEAEXS,EAFW,gEAE2DpB,EAF3D,gBAEmF,EAAKpD,MAAM2D,YAAYE,IAF1G,gBAEqH,EAAK7D,MAAM2D,YAAYC,IAF5I,0BAGMa,MAAMD,GAHZ,cAGXE,EAHW,gBAIEA,EAASC,OAJX,OAIXjG,EAJW,OAKjB,EAAKgB,SAAS,CAAE6D,kBAAmB,IAAI9C,EAAQ/B,KAL9B,kDAOjBuB,QAAQC,IAAR,MACA,EAAKR,SAAS,CAAEkF,OAAO,IARN,0DA1BvB,EAsCEC,iBAtCF,sBAsCqB,gCAAAd,EAAA,sEAETS,EAFS,gEAE6DpB,EAF7D,cAEmF,EAAKpD,MAAMyD,SAF9F,0BAGQgB,MAAMD,GAHd,cAGTE,EAHS,gBAIIA,EAASC,OAJb,OAITjG,EAJS,OAKf,EAAKgB,SAAS,CACZ6D,kBAAmB,IAAI9C,EAAQ/B,GAC/B+E,SAAU/E,EAAK2B,KACfyE,WAAYpG,EAAKqG,QARJ,kDAWf9E,QAAQC,IAAR,MACA,EAAKR,SAAS,CAAEkF,OAAO,IAZR,0DAtCrB,EAsDEI,YAtDF,sBAsDgB,kCAAAjB,EAAA,sEAEJS,EAFI,iEAEmEpB,EAFnE,gBAE2F,EAAKpD,MAAM2D,YAAYE,IAFlH,gBAE6H,EAAK7D,MAAM2D,YAAYC,IAFpJ,iCAGaa,MAAMD,GAHnB,cAGJE,EAHI,gBAISA,EAASC,OAJlB,OAIJjG,EAJI,OAKJuG,EAAgBnD,EAAepD,EAAKqD,MAC1C,EAAKrC,SAAS,CAAEmD,SAAUoC,IANhB,kDAQVhF,QAAQC,IAAR,MACA,EAAKR,SAAS,CAAEkF,OAAO,IATb,0DAtDhB,EA6EEM,OAAS,SAACC,GACR,EAAKzF,SAAS,CAAEgE,WAAW,IAC3B,EAAKhE,SAAS,CAAE+D,SAAU0B,GAA1B,sBAAkC,sBAAApB,EAAA,sEAC1B,EAAKc,mBADqB,uBAE1B,EAAKG,cAFqB,OAGhC,EAAKtF,SAAS,CAAEgE,WAAW,IAHK,6CA/EtC,uDAmEE,WAAqB,IAAD,OAElB,OADAvD,KAAKT,SAAS,CAAEgE,WAAW,IACpB0B,QAAQC,IAAI,CAAClF,KAAKoE,qBAAsBpE,KAAK6E,gBAAgBM,MAClE,kBAAM,EAAK5F,SAAS,CAAEgE,WAAW,SAtEvC,+BA0EE,WACEvD,KAAK2D,cA3ET,oBAsFE,WACE,MACE3D,KAAKH,MADC0D,EAAR,EAAQA,UAAWkB,EAAnB,EAAmBA,MAAOrB,EAA1B,EAA0BA,kBAAmBE,EAA7C,EAA6CA,SAAUZ,EAAvD,EAAuDA,SAGvD,OAAIa,EACK,4CAGLkB,EACK,qDAIP,gCACE,cAAC,EAAD,CAAalG,KAAM6E,EAAnB,SACE,cAAC,EAAD,CACEE,SAAUA,EACV/E,KAAM6E,EACN1D,SAAUM,KAAK+E,WAGnB,cAAC,EAAD,CAAcrC,SAAUA,WA3GhC,GAAyBtC,IAAMC,WCJ/B+E,SAAgB,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.fc54b014.chunk.js","sourcesContent":["import React from 'react';\nimport '../components/App/app.css';\nimport './weather.css';\n\nexport const MainWeather = (props) => {\n  let newDate = new Date();\n\n  return (\n    <div className='main'>\n      <div className='form-container'>{props.children}</div>\n      <div className='main-content'>\n        <div className='temp'>\n          <div className='temp__main'>\n            <div>{props.data.temp} C</div>\n            <div>\n              <img\n                src={`http://openweathermap.org/img/wn/${props.data.icon}@2x.png`}\n                alt=''\n              />\n            </div>\n          </div>\n          <div className='temp__feel'>\n            <p>feels like: {props.data.feels_like} C</p>\n          </div>\n          <div className='wind__main'>\n            <p>wind: {props.data.wind.speed} м/c</p>\n          </div>\n          <div className='humidity'>\n            <p>humidity: {props.data.humidity}%</p>\n          </div>\n          {/* <div className='temp__min'>\n            <p>{props.data.temp_min} C</p>\n          </div>\n          <div className='temp__max'>\n            <p>{props.data.temp_max} C</p>\n          </div> */}\n        </div>\n        <div className='weather'>\n          <div className='weather__location'>\n            <h2>city:&#160; </h2>\n            <h2>{props.data.city}</h2>\n          </div>\n          <div className='weather__date'>\n            {newDate.getHours()}:{newDate.getMinutes()}\n          </div>\n          <div className='weather__description'>\n            <h5>{props.data.description}</h5>\n          </div>\n        </div>\n      </div>\n\n      {/* <div className='location'>\n        <h2>Город:</h2>\n        <h2>{props.data.city}</h2>\n      </div> */}\n    </div>\n  );\n};\n","import React from 'react';\n\nexport class LocationForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.value);\n  };\n  render() {\n    console.log(this.props.data.icon);\n    return (\n      <div className='Location_form'>\n        <form onSubmit={this.onSubmit}>\n          <label className='location-form'>\n            <input\n              type='text'\n              name='location'\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type='submit' value='ok' />\n        </form>\n        {/* <div>\n          <img\n            src={`http://openweathermap.org/img/wn/${this.props.data.icon}@2x.png`}\n            alt=''\n          />\n        </div> */}\n        {/* <div className='location'>\n          <h2>Город:</h2>\n          <h2>{this.props.data.city}</h2>\n        </div> */}\n      </div>\n    );\n  }\n}\n","export class Weather {\n\t/***\n\t *\n\t * @param weatherResponse\n\t * @param {object} weatherResponse.main\n\t */\n\tconstructor(weatherResponse) {\n\t\tconst {\n\t\t\tmain: {\n\t\t\t\ttemp,\n\t\t\t\tfeels_like,\n\t\t\t\ttemp_min,\n\t\t\t\ttemp_max,\n\t\t\t\tpressure,\n\t\t\t\thumidity\n\t\t\t},\n\t\t\twind,\n\t\t\tsys: {country},\n\t\t\tname,\n\t\t\tweather\n\t\t} = weatherResponse;\n\t\tthis.temp = temp;\n\t\tthis.feels_like = feels_like;\n\t\tthis.temp_min = temp_min;\n\t\tthis.temp_max = temp_max;\n\t\tthis.pressure = pressure;\n\t\tthis.humidity = humidity;\n\t\tthis.wind = wind;\n\t\tthis.setIcon(weather);\n\t\tthis.setDescription(weather);\n\t\tthis.setCity(name);\n\t\tthis.setCountry(country);\n\t\tthis.setDate(weatherResponse);\n\t}\n\n\tsetDescription(weatherArr) {\n\t\tconst [current] = weatherArr;\n\t\tif(current.description) {\n\t\t\tthis.description = current.description;\n\t\t}\n\t}\n\n\tsetIcon(weatherArr) {\n\t\tconst [current] = weatherArr;\n\t\tif(current.icon) {\n\t\t\tthis.icon = current.icon;\n\t\t}\n\t}\n\n\tsetCity(city) {\n\t\tif (city) {\n\t\t\tthis.city = city;\n\t\t}\n\t}\n\n\tsetCountry(country) {\n\t\tif (country) {\n\t\t\tthis.country = country;\n\t\t}\n\t}\n\n\tsetDate(weatherResponse) {\n\t\tconst unixDate = weatherResponse.dt + (weatherResponse.timezone ? weatherResponse.timezone : 0);\n\t\tthis.date = new Date(unixDate * 1000);\n\t}\n}","import { Weather } from \"./Weather\";\n\nexport const getDayStr = (date) => {\n\tconst days = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', ];\n\treturn days[date.getUTCDay()];\n};\n\nconst normaliseTime = (time) => {\n\treturn time < 10 ? '0' + time : time;\n}\n\nexport const getTimeStr = (date) => {\n\tconst h = date.getUTCHours();\n\tconst m = date.getUTCMinutes();\n\treturn `${ normaliseTime(h) }:${ normaliseTime(m) }`\n};\n\nexport const parseWeatherResponse = (weatherResponse) => {\n\treturn new Weather(weatherResponse)\n};\n/**\n *\n * @param {Object[]} list WeatherResponse\n * @returns {Promise<Weather[]>}\n */\nexport const reduceForecast = (list = []) => {\n\tconst groupedForecastByDays = [];\n\tlet i = 0;\n\tlet finished = false;\n\twhile (!finished) {\n\t\tfor (let j = 0; j < list.length; j += 1) {\n\t\t\tconst tmp = parseWeatherResponse(list[j]);\n\t\t\tif (!groupedForecastByDays[i]) {\n\t\t\t\tgroupedForecastByDays.push([ tmp ]);\n\t\t\t} else {\n\t\t\t\tif (tmp.date.getDay() === groupedForecastByDays[i][groupedForecastByDays[i].length - 1].date.getDay()) {\n\t\t\t\t\tgroupedForecastByDays[i].push(tmp);\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j === list.length - 1) {\n\t\t\t\tfinished = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst checkProperty = (weather, weatherData) => {\n\t\tfor (let key in weather) {\n\t\t\tif (weather.hasOwnProperty(key)) {\n\t\t\t\tif (typeof weather[key] === \"number\" && key.indexOf('max') >= 0  && weather[key] > weatherData[key]) {\n\t\t\t\t\tweatherData[key] = weather[key]\n\t\t\t\t} else if (typeof weather[key] === \"number\" && key.indexOf('min') >= 0 && weather[key] < weatherData[key]) {\n\t\t\t\t\tweatherData[key] = weather[key]\n\t\t\t\t} else if (typeof weather[key] === \"number\" && weather[key] > weatherData[key]) {\n\t\t\t\t\tweatherData[key] = weather[key]\n\t\t\t\t} else if (weatherData[key] instanceof Date) {\n\t\t\t\t\tweatherData[key] = weather[key]\n\t\t\t\t} else if (typeof weather[key] === \"object\") {\n\t\t\t\t\tcheckProperty(weather[key], weatherData[key])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst forecast = groupedForecastByDays.reduce((days, weatherForDay) => {\n\t\tconst weatherData = weatherForDay[0];\n\t\tfor (let weather of weatherForDay) {\n\t\t\tcheckProperty(weather, weatherData)\n\t\t}\n\t\tdays.push(weatherData);\n\t\treturn days;\n\t}, []);\n\treturn forecast;\n};\n\n\nexport const makeUrl = (url, query) => {\n\tif (query.q) {\n\t\turl += `&q=${ query.q }`;\n\t} else if (query.lon && query.lat) {\n\t\turl += `&lat=${ query.lat }&lon=${ query.lon }`;\n\t}\n\n\treturn url;\n}\n\n\n\n\n","import React from 'react';\nimport './dailyforecast.css';\n\nexport const DailyWeather = (props) => {\n  console.log(props);\n  const forACast = props.forecast;\n  const weatherForAWeek = forACast.map((weather) => {\n    return (\n      <div>\n        {/* <div>{weather.date}</div> */}\n        <div>\n          <div>\n            <img\n              src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}\n              alt=''\n            />\n          </div>\n          <h5>\n            <br /> {weather.temp}&#8451;\n          </h5>\n        </div>\n        <div>\n          <h5>\n            чувствуется как: <br /> {weather.feels_like}&#8451;\n          </h5>\n        </div>\n        <div>\n          <h5>\n            минимальная температура: <br /> {weather.temp_min}&#8451;\n          </h5>\n        </div>\n        <div>\n          <h5>\n            максимальная температура: <br /> {weather.temp_max}&#8451;\n          </h5>\n        </div>\n        <div>\n          <h5>\n            давление: <br /> {weather.pressure}\n          </h5>\n        </div>\n      </div>\n    );\n  });\n  return (\n    <div className='week_weather'>\n      <div className='week_weather_temp'>{weatherForAWeek}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './app.css';\nimport { MainWeather } from '../weather';\nimport { LocationForm } from '../locationForm';\nimport { Weather } from '../../Weather';\nimport { reduceForecast } from '../../Utils';\nimport { DailyWeather } from '../DailyForecast';\nconst { REACT_APP_APP_ID } = process.env;\nexport class App extends React.Component {\n  state = {\n    currentDayWeather: undefined,\n    location: '',\n    forecast: [],\n    isLoading: true,\n    geolocation: { lon: -0.118092, lat: 51.509865 },\n  };\n  getCoords = async () => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition((pos) => {\n        const { longitude, latitude } = pos.coords;\n\n        this.setState(\n          {\n            geolocation: { lon: longitude, lat: latitude },\n          },\n          () => this.updateWeatherData()\n        );\n      });\n    } else {\n      console.log('FUCK OFF');\n    }\n    console.log(this.state.geolocation);\n  };\n\n  getLocationWeather = async () => {\n    try {\n      const requestUrl = `https://api.openweathermap.org/data/2.5/weather?appid=${REACT_APP_APP_ID}&lat=${this.state.geolocation.lat}&lon=${this.state.geolocation.lon}&units=metric`;\n      const response = await fetch(requestUrl);\n      const data = await response.json();\n      this.setState({ currentDayWeather: new Weather(data) });\n    } catch (e) {\n      console.log(e);\n      this.setState({ error: true });\n    }\n  };\n\n  getWeatherByName = async () => {\n    try {\n      const requestUrl = `https://api.openweathermap.org/data/2.5/weather?appid=${REACT_APP_APP_ID}&q=${this.state.location}&units=metric`;\n      const response = await fetch(requestUrl);\n      const data = await response.json();\n      this.setState({\n        currentDayWeather: new Weather(data),\n        location: data.name,\n        gelocation: data.coord,\n      });\n    } catch (e) {\n      console.log(e);\n      this.setState({ error: true });\n    }\n  };\n\n  getForecast = async () => {\n    try {\n      const requestUrl = `https://api.openweathermap.org/data/2.5/forecast?appid=${REACT_APP_APP_ID}&lat=${this.state.geolocation.lat}&lon=${this.state.geolocation.lon}&units=metric&cnt=40`;\n      const response = await fetch(requestUrl);\n      const data = await response.json();\n      const dayliForecast = reduceForecast(data.list);\n      this.setState({ forecast: dayliForecast });\n    } catch (e) {\n      console.log(e);\n      this.setState({ error: true });\n    }\n  };\n\n  updateWeatherData() {\n    this.setState({ isLoading: true });\n    return Promise.all([this.getLocationWeather(), this.getForecast()]).then(\n      () => this.setState({ isLoading: false })\n    );\n  }\n\n  componentDidMount() {\n    this.getCoords();\n  }\n  search = (text) => {\n    this.setState({ isLoading: true });\n    this.setState({ location: text }, async () => {\n      await this.getWeatherByName();\n      await this.getForecast();\n      this.setState({ isLoading: false });\n    });\n  };\n\n  render() {\n    const { isLoading, error, currentDayWeather, location, forecast } =\n      this.state;\n\n    if (isLoading) {\n      return <h2>LOADING...</h2>;\n    }\n\n    if (error) {\n      return <h2>Please reload page!</h2>;\n    }\n\n    return (\n      <div>\n        <MainWeather data={currentDayWeather}>\n          <LocationForm\n            location={location}\n            data={currentDayWeather}\n            onSubmit={this.search}\n          />\n        </MainWeather>\n        <DailyWeather forecast={forecast} />\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { App } from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}